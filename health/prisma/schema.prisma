generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DoctorApplication {
  id                String                @id @default(cuid())
  firstName         String
  lastName          String
  email             String                @unique
  phone             String
  dateOfBirth       DateTime
  address           String
  licenseNumber     String                @unique
  specialization    MedicalSpecialization
  yearsOfExperience Int
  education         String
  currentWorkplace  String?
  bio               String
  credentials       Json?
  status            ApplicationStatus     @default(PENDING)
  notes             String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  reviewedAt        DateTime?
  reviewedBy        String?
  wallet            Wallet?
  completedSessions Int    @default(0)

  // Add the relation to appointments
  appointments      Appointment[]

  @@map("doctor_applications")
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum MedicalSpecialization {
  GENERAL_PRACTICE
  PSYCHIATRY
  PSYCHOLOGY
  COUNSELING
  BEHAVIORAL_THERAPY
  CLINICAL_PSYCHOLOGY
  CHILD_PSYCHOLOGY
  OTHER
}

model Appointment {
  id          String   @id @default(cuid())
  patientName String
  date        DateTime
  time        String
  type        String
  status      AppointmentStatus
  notes       String?
  doctorId    String
  patientId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Add the relation to DoctorApplication
  doctor      DoctorApplication @relation(fields: [doctorId], references: [id])

  @@map("appointments")
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

model Wallet {
  id        String   @id @default(cuid())
  balance   Float    @default(0)
  doctorId  String   @unique
  doctor    DoctorApplication @relation(fields: [doctorId], references: [id])
  transactions Transaction[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  description String?
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TransactionType {
  CREDIT    // Money added to wallet (e.g., from completed appointments)
  WITHDRAWAL // Money withdrawn from wallet
  REFUND    // Money refunded to patient
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}